import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from flask import Flask, request, send_from_directory
import os
import json

# üîê –¢–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = '8307281840:AAFUJ21F9-Ql7HPWkUXl8RhNonwRNTPYyJk'
ADMIN_CHAT_ID = 6172156061

# üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__, static_folder='public')

# üìÅ –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
ORDERS_FILE = 'orders.json'

# üìÑ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–æ–≤
def read_orders():
    if not os.path.exists(ORDERS_FILE):
        return []
    with open(ORDERS_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def write_orders(orders):
    with open(ORDERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(orders, f, indent=2, ensure_ascii=False)

# üì© Webhook –¥–ª—è Telegram
@app.route('/' + TOKEN, methods=['POST'])
def webhook():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return '', 200

# üåê –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
@app.route('/')
def index():
    return '–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!'

# üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ (WebApp)
@app.route('/catalog.html')
def catalog():
    return send_from_directory('public', 'catalog.html')

# üåê –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç–∞—Ç–∏–∫–∏ (–≤–∫–ª—é—á–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∏)
@app.route('/<path:filename>')
def serve_static(filename):
    return send_from_directory('public', filename)

# üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫–∞–∑–æ–≤
@app.route('/admin/orders')
def admin_orders():
    orders = read_orders()
    html = '<h2>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤</h2>'
    if not orders:
        html += '<p>–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>'
    else:
        for i, order in enumerate(orders, 1):
            html += f'<div style="border:1px solid #ccc; padding:10px; margin-bottom:10px;">'
            html += f'<strong>–ó–∞–∫–∞–∑ #{i}</strong><br>'
            html += f'<pre>{json.dumps(order, ensure_ascii=False, indent=2)}</pre>'
            html += '</div>'
    return html

# ‚ñ∂Ô∏è –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥"
@bot.message_handler(commands=['start'])
def start_handler(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    catalog_btn = KeyboardButton(
        "üì¶ –ö–∞—Ç–∞–ª–æ–≥",
        web_app=WebAppInfo(url="https://ekran-tj-hofiz.up.railway.app/catalog.html")
    )
    markup.add(catalog_btn)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=markup)

# üõí –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
@bot.message_handler(content_types=['web_app_data'])
def handle_web_app_data(message):
    print("üì© –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp:", message.web_app_data.data)
    order_text = message.web_app_data.data
    user = message.from_user
    user_name = f"{user.first_name or ''} {user.last_name or ''}".strip() or "–ö–ª–∏–µ–Ω—Ç"

    msg = f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç: {user_name}\n\n{order_text}"
    bot.send_message(ADMIN_CHAT_ID, msg)
    bot.send_message(message.chat.id, "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω! –°–ø–∞—Å–∏–±–æ.")

    try:
        orders = read_orders()
    except Exception:
        orders = []
    orders.append({
        "user": user_name,
        "order": order_text
    })
    try:
        write_orders(orders)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

# üöÄ –ó–∞–ø—É—Å–∫ Flask + –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Webhook
if __name__ == '__main__':
    bot.remove_webhook()
    bot.set_webhook(url=f'https://ekran-tj-hofiz.up.railway.app/{TOKEN}')
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)
